// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Chips needed: A register, D register, ALU, PC chip

    // instruction decode
    Mux16(a = instruction, b = aluout1, sel = instruction[15], out = w1); // w1 is the output of instruction/ALU
    // register A
    Not(in = instruction[15], out = aload1);
    And(a = instruction[5], b = instruction[15], out = aload2);
    Or(a = aload1, b = aload2, out = aload);

    ARegister(in = w1, load = aload, out = aout, out[0..14] = addressM, out = pcin);

    // ALU input
    // in this case, instruction[12] has a meaning anyway
    Mux16(a = aout, b = inM, sel = instruction[12], out = aluin2);

    // D register
    And(a = instruction[15], b = instruction[4], out = dload);
    DRegister(in = aluout2, load = dload, out = aluin1);

    // ALU
    ALU(x = aluin1, y = aluin2, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = aluout1, out = aluout2, out = outM, zr = zrout, ng = ngout);

    // Control M
    And(a = instruction[15], b = instruction[3], out = writeM);

    // PC
    // deduce load and inc
    Not(in = instruction[2], out = j1not);
    Not(in = instruction[1], out = j2not);
    Not(in = instruction[0], out = j3not);
    Not(in = zrout, out = zrnot);
    Not(in = ngout, out = ngnot);
    And(a = instruction[2], b = instruction[1], out = j1j2);
    And(a = j1not, b = j2not, out = j1notj2not);
    And(a = instruction[2], b = j2not, out = j1j2not);
    And(a = j1not, b = instruction[1], out = j1notj2);
    And(a = j1notj2not, b = instruction[0], out = j1notj2notj3);
    And(a = j1notj2not, b = j3not, out = j1notj2notj3not);
    And(a = j1notj2, b = instruction[0], out = j1notj2j3);
    And(a = j1notj2, b = j3not, out = j1notj2j3not);
    And(a = j1j2not, b = instruction[0], out = j1j2notj3);
    And(a = j1j2not, b = j3not, out = j1j2notj3not);
    And(a = j1j2, b = instruction[0], out = pcload7);
    And(a = j1j2, b = j3not, out = j1j2j3not);

    And(a = j1notj2notj3, b = zrnot, out = j1notj2notj3zrnot);
    And(a = j1notj2notj3zrnot, b = ngnot, out = pcload1);

    And(a = j1notj2j3not, b = zrout, out = pcload2);
    And(a = j1notj2j3, b = ngnot, out = pcload3);
    And(a = j1j2notj3not, b = ngout, out = pcload4);
    And(a = j1j2notj3, b = zrnot, out = pcload5);

    Or(a = zrout, b = ngout, out = zrorng);
    And(a = j1j2j3not, b = zrorng, out = pcload6);


    Or8Way(in[0] = false, in[1] = pcload1, in[2] = pcload2, in[3] = pcload3, in[4] = pcload4, in[5] = pcload5, in[6] = pcload6, in[7] = pcload7, out = pcload);
    And(a = instruction[15], b = pcload, out = pcloadfinal);
    PC(in = pcin, load = pcloadfinal, inc = true, reset = reset, out[0..14] = pc);

}
